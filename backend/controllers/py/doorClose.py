import asyncio
from bleak import BleakScanner, BleakClient
from controller_pb2 import IdentifyRequest, ControllerResponse, States, GetState

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BLE_DEVICE_NAME = "ROOM_34"
TOKEN = "GbKZUb0ZU5oTAzun"

async def find_device():
    #print("üîç [–®–∞–≥ 1] –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
    devices = await BleakScanner.discover()
    for device in devices:
        if device.name == BLE_DEVICE_NAME:
            #print(f"‚úÖ [–®–∞–≥ 1] –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–æ: {device.name} ({device.address})")
            return device.address
    #print("‚ùå [–®–∞–≥ 1] –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    return None
    # –†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ ClientMessage —Å set_state
    set_state_bytes = b'\x08' + state_value.to_bytes(1, 'little')
    client_message_bytes = b'\x12' + len(set_state_bytes).to_bytes(1, 'little') + set_state_bytes
    return client_message_bytes

def build_set_state_raw(state_value):
    # –†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ SetState –±–µ–∑ ClientMessage
    return b'\x08' + state_value.to_bytes(1, 'little')

async def send_state_command(client, ff01_char, state_value, action):
    if client.is_connected:
        #print(f"üí° [–®–∞–≥] –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã {action} (ClientMessage)...")
        message_bytes = build_set_state_raw(state_value)
        #print(f"‚úÖ [–®–∞–≥] –ö–æ–º–∞–Ω–¥–∞ {action} (Raw): {message_bytes.hex()}")
        await client.write_gatt_char(ff01_char, message_bytes)




async def handle_notification(sender, data):
    #print(f"üì° [–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ] –î–ª–∏–Ω–∞={len(data)}, Hex={data.hex()}")
    if data == b'\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e':
        #print("‚úÖ [–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ] –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
        return True
    try:
        # –ü—Ä–æ–±—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        try:
            print(f"üìã [–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ] –î–∞–Ω–Ω—ã–µ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞: {data.decode('utf-8')}")
        except UnicodeDecodeError:
            print(f"üìã [–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ] –î–∞–Ω–Ω—ã–µ –Ω–µ —Å—Ç—Ä–æ–∫–∞, —Å—ã—Ä—ã–µ –±–∞–π—Ç—ã: {data.hex()}")
        
        # –ü—Ä–æ–±—É–µ–º –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–∞–∫ ControllerResponse
        response = ControllerResponse()
        response.ParseFromString(data)
        print(f"{response}")
        if response.HasField('status'):
            #print(f"‚úÖ [–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ] –°—Ç–∞—Ç—É—Å: {response.status}")
            return response.status == response.Statuses.Ok
        elif response.HasField('state'):
            state = response.state
            #print(f"‚úÖ [–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ] –°–æ—Å—Ç–æ—è–Ω–∏–µ: –°–≤–µ—Ç={state.light_on}, –î–≤–µ—Ä—å={state.door_lock}, "
                  #f"–ö–∞–Ω–∞–ª 1={state.channel_1}, –ö–∞–Ω–∞–ª 2={state.channel_2}, "
                  #f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞={state.temperature}, –î–∞–≤–ª–µ–Ω–∏–µ={state.pressure}, "
                  #f"–í–ª–∞–∂–Ω–æ—Å—Ç—å={state.humidity}")
            return True
        elif response.HasField('info'):
            info = response.info
            #print(f"‚úÖ [–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: IP={info.ip}, MAC={info.mac}, BLE Name={info.ble_name}, Token={info.token}")
            return True
        else:
            print("‚ö†Ô∏è [–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ] –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø–æ–ª–µ–π ControllerResponse")
    except Exception as e:
        print(f"‚ùå [–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ] –û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
    return False



async def get_state(client, ff01_char):
    if client.is_connected:
        print("üîÑ [–®–∞–≥] –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç GetState (–ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        get_state_message = GetState()

        # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ –±–∞–π—Ç—ã
        message_bytes = get_state_message.SerializeToString()  
        #print(f"‚úÖ [–®–∞–≥] –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {message_bytes.hex()}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ BLE
        await client.write_gatt_char(ff01_char, message_bytes)
        await asyncio.sleep(2)  # –ü–æ–¥–æ–∂–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞

        # –û–∂–∏–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        #print("üì° [–®–∞–≥] –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
        await asyncio.sleep(2)  # –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–µ–º, —á—Ç–æ–±—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ–≥–ª–æ –æ—Ç–≤–µ—Ç–∏—Ç—å

        # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–ª—É—á–∞–µ—Ç–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ `handle_notification`.







async def connect_and_interact(address):
    if not address:
        return
    
    async with BleakClient(address) as client:
        #print(f"üì∂ [–®–∞–≥ 2] –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {BLE_DEVICE_NAME}!")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–π—Å—Ç–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        #print("üõ†Ô∏è [–®–∞–≥ 3] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫...")
        ff02_char = None
        ff01_char = None
        for service in client.services:
            #print(f"\nüõ†Ô∏è [–®–∞–≥ 3] –°–µ—Ä–≤–∏—Å UUID: {service.uuid}")
            for char in service.characteristics:
                props = [p for p in ['read', 'write', 'notify'] if p in char.properties]
                #print(f"  üîπ [–®–∞–≥ 3] –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ UUID: {char.uuid} ({', '.join(props)})")
                if char.uuid == "0000ff02-0000-1000-8000-00805f9b34fb":
                    ff02_char = char
                elif char.uuid == "0000ff01-0000-1000-8000-00805f9b34fb":
                    ff01_char = char

        if not ff02_char or not ff01_char:
            #print("‚ùå [–®–∞–≥ 3] –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if not client.is_connected:
            #print("‚ùå [–®–∞–≥ 4] –ö–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!")
            return

        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        #print("üîë [–®–∞–≥ 4] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ ff02...")
        identify_request = IdentifyRequest()
        identify_request.Token = TOKEN
        await client.write_gatt_char(ff02_char, identify_request.SerializeToString())
        #print("‚úÖ [–®–∞–≥ 4] –¢–æ–∫–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ ff02")
        #await asyncio.sleep(2.0)

        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        #print("üì° [–®–∞–≥ 5] –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç ff01...")
        await client.start_notify(ff01_char, handle_notification)
        #print("‚úÖ [–®–∞–≥ 5] –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ff01 –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
        #await asyncio.sleep(2.0)

        await send_state_command(client, ff01_char, States.DoorLockClose,'–∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–º–∫–∞')     

        #await get_state(client, ff01_char)

        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        await client.stop_notify(ff01_char)
        #print("‚úÖ [–®–∞–≥ 12] –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ff01 –æ—Ç–∫–ª—é—á–µ–Ω–∞")









async def main():
    #print("üöÄ [–®–∞–≥ 0] –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
    device_address = await find_device()
    if device_address:
        await connect_and_interact(device_address)
    #print("üèÅ [–®–∞–≥ 13] –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    asyncio.run(main())